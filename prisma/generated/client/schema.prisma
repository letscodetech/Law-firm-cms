generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id          String       @id @default(uuid())
  name        String
  dateOpened  DateTime
  status      String
  type        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cases       Case[]
  caseDetails CaseDetails?
  billing     Billing? // Added the relation field
}

model Case {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CaseDetails {
  id             Int      @id @default(autoincrement())
  caseNumber     String
  trackingNumber String?
  caseSummary    String?  @db.Text
  filingDate     String
  station        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relation with Client
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String @unique

  @@map("case_details")
}

model Document {
  id        String     @id @default(uuid())
  name      String
  type      String
  mimeType  String?
  size      Int?
  path      String?
  parentId  String?
  parent    Document?  @relation("ParentToChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children  Document[] @relation("ParentToChildren")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Billing {
  id              String   @id @default(uuid())
  clientId        String   @unique
  clientName      String?
  totalAmount     Float
  amountPaid      Float
  amountRemaining Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation with Client
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        String
  time        String // Time in HH:MM format
  type        String   @default("other") // hearing, mention, meeting, deadline, other
  color       String   @default("blue") // blue, red, green, purple, orange
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
